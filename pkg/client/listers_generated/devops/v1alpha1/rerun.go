/*
Copyright 2018 The Kubesphere Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/magicsong/s2iapiserver/pkg/apis/devops/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RerunLister helps list Reruns.
type RerunLister interface {
	// List lists all Reruns in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Rerun, err error)
	// Reruns returns an object that can list and get Reruns.
	Reruns(namespace string) RerunNamespaceLister
	RerunListerExpansion
}

// rerunLister implements the RerunLister interface.
type rerunLister struct {
	indexer cache.Indexer
}

// NewRerunLister returns a new RerunLister.
func NewRerunLister(indexer cache.Indexer) RerunLister {
	return &rerunLister{indexer: indexer}
}

// List lists all Reruns in the indexer.
func (s *rerunLister) List(selector labels.Selector) (ret []*v1alpha1.Rerun, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Rerun))
	})
	return ret, err
}

// Reruns returns an object that can list and get Reruns.
func (s *rerunLister) Reruns(namespace string) RerunNamespaceLister {
	return rerunNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RerunNamespaceLister helps list and get Reruns.
type RerunNamespaceLister interface {
	// List lists all Reruns in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Rerun, err error)
	// Get retrieves the Rerun from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Rerun, error)
	RerunNamespaceListerExpansion
}

// rerunNamespaceLister implements the RerunNamespaceLister
// interface.
type rerunNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Reruns in the indexer for a given namespace.
func (s rerunNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Rerun, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Rerun))
	})
	return ret, err
}

// Get retrieves the Rerun from the indexer for a given namespace and name.
func (s rerunNamespaceLister) Get(name string) (*v1alpha1.Rerun, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("rerun"), name)
	}
	return obj.(*v1alpha1.Rerun), nil
}
