/*
Copyright 2018 The Kubesphere Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/magicsong/s2iapiserver/pkg/apis/devops/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KsBuilderLister helps list KsBuilders.
type KsBuilderLister interface {
	// List lists all KsBuilders in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.KsBuilder, err error)
	// KsBuilders returns an object that can list and get KsBuilders.
	KsBuilders(namespace string) KsBuilderNamespaceLister
	KsBuilderListerExpansion
}

// ksBuilderLister implements the KsBuilderLister interface.
type ksBuilderLister struct {
	indexer cache.Indexer
}

// NewKsBuilderLister returns a new KsBuilderLister.
func NewKsBuilderLister(indexer cache.Indexer) KsBuilderLister {
	return &ksBuilderLister{indexer: indexer}
}

// List lists all KsBuilders in the indexer.
func (s *ksBuilderLister) List(selector labels.Selector) (ret []*v1alpha1.KsBuilder, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KsBuilder))
	})
	return ret, err
}

// KsBuilders returns an object that can list and get KsBuilders.
func (s *ksBuilderLister) KsBuilders(namespace string) KsBuilderNamespaceLister {
	return ksBuilderNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KsBuilderNamespaceLister helps list and get KsBuilders.
type KsBuilderNamespaceLister interface {
	// List lists all KsBuilders in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.KsBuilder, err error)
	// Get retrieves the KsBuilder from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.KsBuilder, error)
	KsBuilderNamespaceListerExpansion
}

// ksBuilderNamespaceLister implements the KsBuilderNamespaceLister
// interface.
type ksBuilderNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KsBuilders in the indexer for a given namespace.
func (s ksBuilderNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KsBuilder, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KsBuilder))
	})
	return ret, err
}

// Get retrieves the KsBuilder from the indexer for a given namespace and name.
func (s ksBuilderNamespaceLister) Get(name string) (*v1alpha1.KsBuilder, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ksbuilder"), name)
	}
	return obj.(*v1alpha1.KsBuilder), nil
}
