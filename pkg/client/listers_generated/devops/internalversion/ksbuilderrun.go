/*
Copyright 2018 The Kubesphere Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// This file was automatically generated by lister-gen

package internalversion

import (
	devops "github.com/magicsong/s2iapiserver/pkg/apis/devops"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KsBuilderRunLister helps list KsBuilderRuns.
type KsBuilderRunLister interface {
	// List lists all KsBuilderRuns in the indexer.
	List(selector labels.Selector) (ret []*devops.KsBuilderRun, err error)
	// KsBuilderRuns returns an object that can list and get KsBuilderRuns.
	KsBuilderRuns(namespace string) KsBuilderRunNamespaceLister
	KsBuilderRunListerExpansion
}

// ksBuilderRunLister implements the KsBuilderRunLister interface.
type ksBuilderRunLister struct {
	indexer cache.Indexer
}

// NewKsBuilderRunLister returns a new KsBuilderRunLister.
func NewKsBuilderRunLister(indexer cache.Indexer) KsBuilderRunLister {
	return &ksBuilderRunLister{indexer: indexer}
}

// List lists all KsBuilderRuns in the indexer.
func (s *ksBuilderRunLister) List(selector labels.Selector) (ret []*devops.KsBuilderRun, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*devops.KsBuilderRun))
	})
	return ret, err
}

// KsBuilderRuns returns an object that can list and get KsBuilderRuns.
func (s *ksBuilderRunLister) KsBuilderRuns(namespace string) KsBuilderRunNamespaceLister {
	return ksBuilderRunNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KsBuilderRunNamespaceLister helps list and get KsBuilderRuns.
type KsBuilderRunNamespaceLister interface {
	// List lists all KsBuilderRuns in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*devops.KsBuilderRun, err error)
	// Get retrieves the KsBuilderRun from the indexer for a given namespace and name.
	Get(name string) (*devops.KsBuilderRun, error)
	KsBuilderRunNamespaceListerExpansion
}

// ksBuilderRunNamespaceLister implements the KsBuilderRunNamespaceLister
// interface.
type ksBuilderRunNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KsBuilderRuns in the indexer for a given namespace.
func (s ksBuilderRunNamespaceLister) List(selector labels.Selector) (ret []*devops.KsBuilderRun, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*devops.KsBuilderRun))
	})
	return ret, err
}

// Get retrieves the KsBuilderRun from the indexer for a given namespace and name.
func (s ksBuilderRunNamespaceLister) Get(name string) (*devops.KsBuilderRun, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(devops.Resource("ksbuilderrun"), name)
	}
	return obj.(*devops.KsBuilderRun), nil
}
