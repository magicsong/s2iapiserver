/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by apiregister-gen. Do not edit it manually!

package devops

import (
	"fmt"
	"github.com/kubernetes-incubator/apiserver-builder/pkg/builders"
	"k8s.io/apimachinery/pkg/apis/meta/internalversion"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver/pkg/endpoints/request"
	"k8s.io/apiserver/pkg/registry/rest"
)

var (
	InternalS2iBuilder = builders.NewInternalResource(
		"s2ibuilders",
		"S2iBuilder",
		func() runtime.Object { return &S2iBuilder{} },
		func() runtime.Object { return &S2iBuilderList{} },
	)
	InternalS2iBuilderStatus = builders.NewInternalResourceStatus(
		"s2ibuilders",
		"S2iBuilderStatus",
		func() runtime.Object { return &S2iBuilder{} },
		func() runtime.Object { return &S2iBuilderList{} },
	)
	// Registered resources and subresources
	ApiVersion = builders.NewApiGroup("devops.kubesphere.io").WithKinds(
		InternalS2iBuilder,
		InternalS2iBuilderStatus,
	)

	// Required by code generated by go2idl
	AddToScheme        = ApiVersion.SchemaBuilder.AddToScheme
	SchemeBuilder      = ApiVersion.SchemaBuilder
	localSchemeBuilder = &SchemeBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

// +genclient
// +genclient
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type S2iBuilder struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   S2iBuilderSpec
	Status S2iBuilderStatus
}

type S2iBuilderSpec struct {
	Hello string
}

type S2iBuilderStatus struct {
}

//
// S2iBuilder Functions and Structs
//
// +k8s:deepcopy-gen=false
type S2iBuilderStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type S2iBuilderStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type S2iBuilderList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []S2iBuilder
}

func (S2iBuilder) NewStatus() interface{} {
	return S2iBuilderStatus{}
}

func (pc *S2iBuilder) GetStatus() interface{} {
	return pc.Status
}

func (pc *S2iBuilder) SetStatus(s interface{}) {
	pc.Status = s.(S2iBuilderStatus)
}

func (pc *S2iBuilder) GetSpec() interface{} {
	return pc.Spec
}

func (pc *S2iBuilder) SetSpec(s interface{}) {
	pc.Spec = s.(S2iBuilderSpec)
}

func (pc *S2iBuilder) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *S2iBuilder) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc S2iBuilder) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store S2iBuilder.
// +k8s:deepcopy-gen=false
type S2iBuilderRegistry interface {
	ListS2iBuilders(ctx request.Context, options *internalversion.ListOptions) (*S2iBuilderList, error)
	GetS2iBuilder(ctx request.Context, id string, options *metav1.GetOptions) (*S2iBuilder, error)
	CreateS2iBuilder(ctx request.Context, id *S2iBuilder) (*S2iBuilder, error)
	UpdateS2iBuilder(ctx request.Context, id *S2iBuilder) (*S2iBuilder, error)
	DeleteS2iBuilder(ctx request.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewS2iBuilderRegistry(sp builders.StandardStorageProvider) S2iBuilderRegistry {
	return &storageS2iBuilder{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageS2iBuilder struct {
	builders.StandardStorageProvider
}

func (s *storageS2iBuilder) ListS2iBuilders(ctx request.Context, options *internalversion.ListOptions) (*S2iBuilderList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*S2iBuilderList), err
}

func (s *storageS2iBuilder) GetS2iBuilder(ctx request.Context, id string, options *metav1.GetOptions) (*S2iBuilder, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*S2iBuilder), nil
}

func (s *storageS2iBuilder) CreateS2iBuilder(ctx request.Context, object *S2iBuilder) (*S2iBuilder, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, true)
	if err != nil {
		return nil, err
	}
	return obj.(*S2iBuilder), nil
}

func (s *storageS2iBuilder) UpdateS2iBuilder(ctx request.Context, object *S2iBuilder) (*S2iBuilder, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil)
	if err != nil {
		return nil, err
	}
	return obj.(*S2iBuilder), nil
}

func (s *storageS2iBuilder) DeleteS2iBuilder(ctx request.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, nil)
	return sync, err
}
